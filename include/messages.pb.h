/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_TRIM_TAB_MESSAGES_MESSAGES_PB_H_INCLUDED
#define PB_TRIM_TAB_MESSAGES_MESSAGES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _TRIM_STATE {
    TRIM_STATE_TRIM_STATE_MAX_LIFT_PORT = 0,
    TRIM_STATE_TRIM_STATE_MAX_LIFT_STBD = 1,
    TRIM_STATE_TRIM_STATE_MAX_DRAG_PORT = 2,
    TRIM_STATE_TRIM_STATE_MAX_DRAG_STBD = 3,
    TRIM_STATE_TRIM_STATE_MIN_LIFT = 4,
    TRIM_STATE_TRIM_STATE_MANUAL = 5
} TRIM_STATE;

typedef enum _CONTROL_MESSAGE_CONTROL_TYPE {
    CONTROL_MESSAGE_CONTROL_TYPE_CONTROL_MESSAGE_CONTROL_TYPE_STATE = 0,
    CONTROL_MESSAGE_CONTROL_TYPE_CONTROL_MESSAGE_CONTROL_TYPE_ANGLE = 1
} CONTROL_MESSAGE_CONTROL_TYPE;

/* Struct definitions */
typedef struct _DataMessage {
    float windAngle;
    uint32_t batteryLevel;
} DataMessage;

typedef struct _ControlMessage {
    CONTROL_MESSAGE_CONTROL_TYPE control_type;
    TRIM_STATE state;
    uint32_t control_angle;
} ControlMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _TRIM_STATE_MIN TRIM_STATE_TRIM_STATE_MAX_LIFT_PORT
#define _TRIM_STATE_MAX TRIM_STATE_TRIM_STATE_MANUAL
#define _TRIM_STATE_ARRAYSIZE ((TRIM_STATE)(TRIM_STATE_TRIM_STATE_MANUAL+1))

#define _CONTROL_MESSAGE_CONTROL_TYPE_MIN CONTROL_MESSAGE_CONTROL_TYPE_CONTROL_MESSAGE_CONTROL_TYPE_STATE
#define _CONTROL_MESSAGE_CONTROL_TYPE_MAX CONTROL_MESSAGE_CONTROL_TYPE_CONTROL_MESSAGE_CONTROL_TYPE_ANGLE
#define _CONTROL_MESSAGE_CONTROL_TYPE_ARRAYSIZE ((CONTROL_MESSAGE_CONTROL_TYPE)(CONTROL_MESSAGE_CONTROL_TYPE_CONTROL_MESSAGE_CONTROL_TYPE_ANGLE+1))


#define ControlMessage_control_type_ENUMTYPE CONTROL_MESSAGE_CONTROL_TYPE
#define ControlMessage_state_ENUMTYPE TRIM_STATE


/* Initializer values for message structs */
#define DataMessage_init_default                 {0, 0}
#define ControlMessage_init_default              {_CONTROL_MESSAGE_CONTROL_TYPE_MIN, _TRIM_STATE_MIN, 0}
#define DataMessage_init_zero                    {0, 0}
#define ControlMessage_init_zero                 {_CONTROL_MESSAGE_CONTROL_TYPE_MIN, _TRIM_STATE_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define DataMessage_windAngle_tag                1
#define DataMessage_batteryLevel_tag             2
#define ControlMessage_control_type_tag          1
#define ControlMessage_state_tag                 2
#define ControlMessage_control_angle_tag         3

/* Struct field encoding specification for nanopb */
#define DataMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    windAngle,         1) \
X(a, STATIC,   SINGULAR, UINT32,   batteryLevel,      2)
#define DataMessage_CALLBACK NULL
#define DataMessage_DEFAULT NULL

#define ControlMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    control_type,      1) \
X(a, STATIC,   SINGULAR, UENUM,    state,             2) \
X(a, STATIC,   SINGULAR, UINT32,   control_angle,     3)
#define ControlMessage_CALLBACK NULL
#define ControlMessage_DEFAULT NULL

extern const pb_msgdesc_t DataMessage_msg;
extern const pb_msgdesc_t ControlMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define DataMessage_fields &DataMessage_msg
#define ControlMessage_fields &ControlMessage_msg

/* Maximum encoded size of messages (where known) */
#define ControlMessage_size                      10
#define DataMessage_size                         11
#define TRIM_TAB_MESSAGES_MESSAGES_PB_H_MAX_SIZE DataMessage_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
